from core.parser import ScanParser, ConfParser
from core.redis import rds
from core.rules import BaseRule
from core.triage import Triage


class Rule(BaseRule):
    def __init__(self):
        super().__init__()
        self.rule = 'VLN_2451'
        self.rule_severity = 3
        self.rule_description = 'This rule checks for severe Common Vulnerabilities and Exposures (CVE).'
        self.rule_confirm = 'Severe Vulnerabilities Found.'
        self.rule_details = ''
        self.rule_mitigation = (
            'The targeted service has one or more severe CVEs (with a high score) associated with its version. '
            'It is recommended to update the software to the latest version.'
        )
        self.intensity = 0

    def check_rule(self, ip, port, values, conf):
        config_parser = ConfParser(conf)
        if not config_parser.get_cfg_allow_inet():
            return

        scan_parser = ScanParser(port, values)
        if not scan_parser.is_module('http'):
            return

        cpe = scan_parser.get_cpe()
        if not cpe:
            return

        triage = Triage()
        if not triage.has_cves(cpe):
            return

        self.rule_details = (
            'List of vulnerabilities for this version: '
            f'https://nvd.nist.gov/vuln/search/results?cpe_version={cpe}'
        )
        domain = scan_parser.get_domain()
        vuln_dict = self.get_vuln_dict(ip, port, domain)
        rds.store_vuln(vuln_dict)
